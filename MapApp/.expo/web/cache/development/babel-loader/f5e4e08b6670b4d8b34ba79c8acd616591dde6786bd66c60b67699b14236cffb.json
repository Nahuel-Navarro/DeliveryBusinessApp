{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport MapView, { Marker } from 'react-native-maps';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useEffect, useState } from 'react';\nimport * as Location from 'expo-location';\nimport { initialMarkerData } from \"./markerData\";\nimport * as Linking from 'expo-linking';\nimport SQLite from 'react-native-sqlite-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState({\n      latitude: -31.31320035959943,\n      longitude: -64.22334981122708,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    mapRegion = _useState2[0],\n    setMapRegion = _useState2[1];\n  var _useState3 = useState(initialMarkerData),\n    _useState4 = _slicedToArray(_useState3, 2),\n    markers = _useState4[0],\n    setMarkers = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    newLatitude = _useState6[0],\n    setNewLatitude = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    newLongitude = _useState8[0],\n    setNewLongitude = _useState8[1];\n  var _useState9 = useState(''),\n    _useState10 = _slicedToArray(_useState9, 2),\n    markerTitle = _useState10[0],\n    setMarkerTitle = _useState10[1];\n  var db = SQLite.openDatabase({\n    name: 'Test1',\n    location: 'default'\n  }, function () {\n    console.log(\"Database connected!\");\n  }, function (error) {\n    console.log(error);\n  });\n  useEffect(function () {\n    _asyncToGenerator(function* () {\n      var _yield$Location$reque = yield Location.requestForegroundPermissionsAsync(),\n        status = _yield$Location$reque.status;\n      if (status !== 'granted') {\n        setErrorMsg('El acceso a la ubicación fue denegado');\n        return;\n      }\n      var location = yield Location.getCurrentPositionAsync({\n        enableHighAccuracy: true\n      });\n      var initialRegion = {\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421\n      };\n      setMapRegion(initialRegion);\n    })();\n  }, []);\n  var addMarker = function addMarker() {\n    if (newLatitude && newLongitude) {\n      var latitude = parseFloat(newLatitude);\n      var longitude = parseFloat(newLongitude);\n      var newMarker = {\n        id: `customMarker${markers.length}`,\n        latitude: latitude,\n        longitude: longitude,\n        title: markerTitle,\n        isCurrentLocation: false,\n        width: 5,\n        height: 5\n      };\n      setMarkers([].concat(_toConsumableArray(markers), [newMarker]));\n      setNewLatitude('');\n      setNewLongitude('');\n      setMarkerTitle('');\n    }\n  };\n  var generateRouteUrl = function generateRouteUrl() {\n    if (markers.length < 2) {\n      alert('Add at least two markers to generate a route.');\n      return;\n    }\n    var routeCoordinates = markers.map(function (marker) {\n      return `${marker.latitude},${marker.longitude}`;\n    });\n    var routeUrl = `https://www.google.com/maps/dir/${routeCoordinates.join('/')}`;\n    Linking.openURL(routeUrl);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(MapView, {\n      style: styles.map,\n      region: mapRegion,\n      children: markers.map(function (marker, index) {\n        return _jsx(Marker, {\n          coordinate: {\n            latitude: marker.latitude,\n            longitude: marker.longitude\n          },\n          title: marker.title,\n          image: marker.isCurrentLocation ? require(\"./assets/TruckIcon.png\") : require(\"./assets/DefaultMarker.png\"),\n          style: {\n            width: marker.width || 5,\n            height: marker.height || 5\n          }\n        }, index);\n      })\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Latitude\",\n      onChangeText: function onChangeText(text) {\n        return setNewLatitude(text);\n      },\n      value: newLatitude\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Longitude\",\n      onChangeText: function onChangeText(text) {\n        return setNewLongitude(text);\n      },\n      value: newLongitude\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Marker Title\",\n      onChangeText: function onChangeText(text) {\n        return setMarkerTitle(text);\n      },\n      value: markerTitle\n    }), _jsx(Button, {\n      title: \"Add Marker\",\n      onPress: addMarker\n    }), _jsx(Button, {\n      title: \"Trazar ruta\",\n      onPress: generateRouteUrl\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  map: {\n    flex: 1\n  },\n  input: {\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    margin: 8,\n    padding: 8\n  }\n});","map":{"version":3,"names":["MapView","Marker","StyleSheet","View","Button","TextInput","useEffect","useState","Location","initialMarkerData","Linking","SQLite","jsx","_jsx","jsxs","_jsxs","App","_useState","latitude","longitude","latitudeDelta","longitudeDelta","_useState2","_slicedToArray","mapRegion","setMapRegion","_useState3","_useState4","markers","setMarkers","_useState5","_useState6","newLatitude","setNewLatitude","_useState7","_useState8","newLongitude","setNewLongitude","_useState9","_useState10","markerTitle","setMarkerTitle","db","openDatabase","name","location","console","log","error","_asyncToGenerator","_yield$Location$reque","requestForegroundPermissionsAsync","status","setErrorMsg","getCurrentPositionAsync","enableHighAccuracy","initialRegion","coords","addMarker","parseFloat","newMarker","id","length","title","isCurrentLocation","width","height","concat","_toConsumableArray","generateRouteUrl","alert","routeCoordinates","map","marker","routeUrl","join","openURL","style","styles","container","children","region","index","coordinate","image","require","input","placeholder","onChangeText","text","value","onPress","create","flex","borderColor","borderWidth","margin","padding"],"sources":["C:/Users/MULTISOFT/Desktop/MapApp/App.js"],"sourcesContent":["import MapView, { Marker } from 'react-native-maps';\nimport { StyleSheet, View, Button, TextInput } from 'react-native';\nimport { useEffect, useState } from 'react';\nimport * as Location from 'expo-location';\nimport { initialMarkerData } from './markerData'; // Import your marker data\nimport * as Linking from 'expo-linking';\nimport SQLite from 'react-native-sqlite-storage';\n\n\nexport default function App() {\n  const [mapRegion, setMapRegion] = useState({\n    latitude: -31.31320035959943,\n    longitude: -64.22334981122708,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421,\n  });\n\n  const [markers, setMarkers] = useState(initialMarkerData); // Initialize with imported data\n  const [newLatitude, setNewLatitude] = useState(''); // State for latitude input\n  const [newLongitude, setNewLongitude] = useState(''); // State for longitude input\n  const [markerTitle, setMarkerTitle] = useState(''); // State for marker title input\n\n\n\n  const db = SQLite.openDatabase(\n    {\n        name: 'Test1',\n        location: 'default',\n    },\n    () => {console.log(\"Database connected!\") },\n    error => { console.log(error) }\n  );\n\n  useEffect(() => {\n    (async () => {\n      let { status } = await Location.requestForegroundPermissionsAsync();\n\n      if (status !== 'granted') {\n        setErrorMsg('El acceso a la ubicación fue denegado');\n        return;\n      }\n\n      const location = await Location.getCurrentPositionAsync({ enableHighAccuracy: true });\n      const initialRegion = {\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421,\n      };\n      setMapRegion(initialRegion);\n    })();\n  }, []);\n\n\n  const addMarker = () => {\n    if (newLatitude && newLongitude) {\n      const latitude = parseFloat(newLatitude);\n      const longitude = parseFloat(newLongitude);\n\n      const newMarker = {\n        id: `customMarker${markers.length}`,\n        latitude,\n        longitude,\n        title: markerTitle,\n        isCurrentLocation: false,\n        width: 5,\n        height: 5,\n      };\n\n      // Update the marker data state with the new marker\n      setMarkers([...markers, newMarker]);\n\n      // Clear the input fields\n      setNewLatitude('');\n      setNewLongitude('');\n      setMarkerTitle('');\n\n      // Optional: Save the updated marker data to a file here if needed\n    }\n  };\n\n  const generateRouteUrl = () => {\n    if (markers.length < 2) {\n      // At least two markers are required to generate a route URL\n      alert('Add at least two markers to generate a route.');\n      return;\n    }\n\n    const routeCoordinates = markers.map((marker) => `${marker.latitude},${marker.longitude}`);\n    const routeUrl = `https://www.google.com/maps/dir/${routeCoordinates.join('/')}`;\n\n    // Open the generated route URL in the device's web browser\n    Linking.openURL(routeUrl);\n  };\n\n  return (\n    <View style={styles.container}>\n      <MapView style={styles.map} region={mapRegion}>\n        {markers.map((marker, index) => (\n          <Marker\n            key={index}\n            coordinate={{\n              latitude: marker.latitude,\n              longitude: marker.longitude,\n            }}\n            title={marker.title}\n            image={\n              marker.isCurrentLocation\n                ? require('./assets/TruckIcon.png')\n                : require('./assets/DefaultMarker.png')\n            }\n            style={{\n              width: marker.width || 5,\n              height: marker.height || 5,\n            }}\n          />\n        ))}\n      </MapView>\n      <TextInput\n        style={styles.input}\n        placeholder=\"Latitude\"\n        onChangeText={(text) => setNewLatitude(text)}\n        value={newLatitude}\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Longitude\"\n        onChangeText={(text) => setNewLongitude(text)}\n        value={newLongitude}\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Marker Title\"\n        onChangeText={(text) => setMarkerTitle(text)}\n        value={markerTitle}\n      />\n      <Button title=\"Add Marker\" onPress={addMarker} />\n      <Button title=\"Trazar ruta\" onPress={generateRouteUrl} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  map: {\n    flex: 1,\n  },\n  input: {\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    margin: 8,\n    padding: 8,\n  },\n});\n\n/*\nimport MapView, { Marker } from 'react-native-maps';\nimport { StyleSheet, View, Button, TextInput } from 'react-native';\nimport { useEffect, useState } from 'react';\nimport * as Location from 'expo-location';\nimport { initialMarkerData } from './markerData'; // Import your marker data\nimport * as Linking from 'expo-linking';\nimport { readMapInfo, insertMarkerIntoDatabase} from './DB'; // Update the path to your database file\n\n\nexport default function App() {\n  const [mapRegion, setMapRegion] = useState({\n    latitude: -31.31320035959943,\n    longitude: -64.22334981122708,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421,\n  });\n\n  const [markers, setMarkers] = useState(initialMarkerData); // Initialize with imported data\n  const [newLatitude, setNewLatitude] = useState(''); // State for latitude input\n  const [newLongitude, setNewLongitude] = useState(''); // State for longitude input\n  const [markerTitle, setMarkerTitle] = useState(''); // State for marker title input\n\n  useEffect(() => {\n    readMapInfo();\n    console.log(readMapInfo())\n  }, []);\n  \n  useEffect(() => {\n    (async () => {\n      let { status } = await Location.requestForegroundPermissionsAsync();\n\n      if (status !== 'granted') {\n        setErrorMsg('El acceso a la ubicación fue denegado');\n        return;\n      }\n\n      const location = await Location.getCurrentPositionAsync({ enableHighAccuracy: true });\n      const initialRegion = {\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421,\n      };\n      setMapRegion(initialRegion);\n    })();\n  }, []);\n\n  useEffect(() => {\n    // Call the function to read marker data from the database when the component mounts\n    const fetchData = async () => {\n      const markerData = await readMarkersFromDatabase();\n      setMarkers(markerData);\n    };\n    fetchData();\n  }, []);\n  \n\n\n  const addMarker = () => {\n    if (newLatitude && newLongitude) {\n      const latitude = parseFloat(newLatitude);\n      const longitude = parseFloat(newLongitude);\n\n      const newMarker = {\n        id: `customMarker${markers.length}`,\n        latitude,\n        longitude,\n        title: markerTitle,\n        isCurrentLocation: false,\n        width: 5,\n        height: 5,\n      };\n\n      // Update the marker data state with the new marker\n      setMarkers([...markers, newMarker]);\n\n\n      insertMarkerIntoDatabase(newMarker);\n\n      // Clear the input fields\n      setNewLatitude('');\n      setNewLongitude('');\n      setMarkerTitle('');\n\n      // Optional: Save the updated marker data to a file here if needed\n    }\n  };\n\n  const generateRouteUrl = () => {\n    if (markers.length < 2) {\n      // At least two markers are required to generate a route URL\n      alert('Add at least two markers to generate a route.');\n      return;\n    }\n\n    const routeCoordinates = markers.map((marker) => `${marker.latitude},${marker.longitude}`);\n    const routeUrl = `https://www.google.com/maps/dir/${routeCoordinates.join('/')}`;\n\n    // Open the generated route URL in the device's web browser\n    Linking.openURL(routeUrl);\n  };\n\n  return (\n    <View style={styles.container}>\n      <MapView style={styles.map} region={mapRegion}>\n        {markers.map((marker, index) => (\n          <Marker\n            key={index}\n            coordinate={{\n              latitude: marker.latitude,\n              longitude: marker.longitude,\n            }}\n            title={marker.title}\n            image={\n              marker.isCurrentLocation\n                ? require('./assets/TruckIcon.png')\n                : require('./assets/DefaultMarker.png')\n            }\n            style={{\n              width: marker.width || 5,\n              height: marker.height || 5,\n            }}\n          />\n        ))}\n      </MapView>\n      <TextInput\n        style={styles.input}\n        placeholder=\"Latitude\"\n        onChangeText={(text) => setNewLatitude(text)}\n        value={newLatitude}\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Longitude\"\n        onChangeText={(text) => setNewLongitude(text)}\n        value={newLongitude}\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Marker Title\"\n        onChangeText={(text) => setMarkerTitle(text)}\n        value={markerTitle}\n      />\n      <Button title=\"Add Marker\" onPress={addMarker} />\n      <Button title=\"Trazar ruta\" onPress={generateRouteUrl} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  map: {\n    flex: 1,\n  },\n  input: {\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    margin: 8,\n    padding: 8,\n  },\n});\n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}